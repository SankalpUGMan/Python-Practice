#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
LAB 10 REPORT
\end_layout

\begin_layout Title
Spectra of non-periodic signals
\end_layout

\begin_layout Author
Name: 
\bar under
Sankalp Saoji
\end_layout

\begin_layout Author
Roll No: 
\bar under
EE16B063
\end_layout

\begin_layout Author
Course: 
\bar under
EE2703 - Applied Programming Lab
\end_layout

\begin_layout Date
Date: 28/04/2018
\end_layout

\begin_layout Abstract
In this week, we dealt with non-periodic signals and obtained their fourier
 spectra.
\end_layout

\begin_layout Section
INTRODUCTION
\end_layout

\begin_layout Standard
For periodic signals our approach to find the spectra was,
\end_layout

\begin_layout Standard
1) Sample the signal so that f
\begin_inset Formula $_{Nyquist}$
\end_inset

 is met, and ∆f is small enough.
 
\end_layout

\begin_layout Standard
2) Generate the frequency axis from −f max /2 to +f max /2, taking care
 to drop the last term.
 
\end_layout

\begin_layout Standard
3) Ensure that the signal starts at t = 0
\begin_inset Formula $^{+}$
\end_inset

 and ends at t = 0
\begin_inset Formula $^{-}$
\end_inset

.
\end_layout

\begin_layout Standard
4) Use 2k samples 
\end_layout

\begin_layout Standard
5) Obtain the DFT
\end_layout

\begin_layout Standard
6) Rotate the samples so that they go from f = − f max /2 to f = + f max
 /2 − ∆ f .
 
\end_layout

\begin_layout Standard
7) Plot the magnitude and phase of the spectrum.
 Usually we would plot the magnitude in dB and the phase in degrees and
 the frequency axis would be logarithmic.
 This is to capture polynomial decay of the spectrum.
\end_layout

\begin_layout Section
QUESTIONS
\end_layout

\begin_layout Subsection
Working out the examples from the given pdf,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Importing modules and libraries
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from pylab import *
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the above code, I have imported all the modules and libraries I will
 require in this assignment.
\end_layout

\begin_layout Subsubsection
Calculating dft in python for sin(
\begin_inset Formula $\sqrt{2}$
\end_inset

t) :
\end_layout

\begin_layout Standard
Now we want to look at non-periodic signals.
 Our signal is sin(
\begin_inset Formula $\sqrt{2}$
\end_inset

t) .
 After obtaining its spectrum over 0 to 2
\begin_inset Formula $\pi$
\end_inset

 with 64 samples, this function looks as follows:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename sine_root2t_fourier.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Below is the code for the above graphs.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Obtaining fourier transform of sin(sqrt(2*t))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-pi,pi,65)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

y = sin(sqrt(2)*t)
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                             
\end_layout

\begin_layout Plain Layout

#the sample corresponding to -tmax should be set zero
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                      
\end_layout

\begin_layout Plain Layout

#make y start with y(t=0)
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/64.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,65)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(0)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-10,10])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of $
\backslash
sin
\backslash
left(
\backslash
sqrt{2}t
\backslash
right)$")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-10,10])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("sine_root2t_fourier.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) We expected two spikes, but what we got were two peaks each with two
 values and a gradually decaying magnitude.
 
\end_layout

\begin_layout Standard
2) The phase is correct though.
\end_layout

\begin_layout Standard
There is one line in the code, 
\end_layout

\begin_layout Standard
y[0] = 0 
\end_layout

\begin_layout Standard
This is for the sample corresponding to -tmax should be set zero and an
 antisymmetric function has a purely imaginary fourier transform.
 
\end_layout

\begin_layout Standard
But what about an antisymmetric set of samples? Suppose,
\end_layout

\begin_layout Standard
y[0] = 0 (sin(0))
\end_layout

\begin_layout Standard
y[i] = -y[N-i]    (i  = 1,2,3 ...
 
\begin_inset Formula $\frac{N}{2}-1$
\end_inset

)
\end_layout

\begin_layout Standard
y[
\begin_inset Formula $\frac{N}{2}]$
\end_inset

 = sin(t
\begin_inset Formula $_{\frac{N}{2}}$
\end_inset

)   (sin(-t
\begin_inset Formula $_{max}))$
\end_inset


\end_layout

\begin_layout Standard
The DFT of this sequence gives us,
\end_layout

\begin_layout Standard
Y[k] = 
\begin_inset Formula $\sum_{n=0}^{N-1}$
\end_inset

y[n]e
\begin_inset Formula $^{\frac{2\pi jkn}{N}}$
\end_inset

           
\end_layout

\begin_layout Standard
Y[k] = 
\begin_inset Formula $\sum_{n=1}^{\frac{N}{2}-1}$
\end_inset

y[n]e
\begin_inset Formula $^{\frac{2\pi jkn}{N}}$
\end_inset

 - e
\begin_inset Formula $^{\frac{*2\pi jkn}{N}}$
\end_inset

 + y[
\begin_inset Formula $\frac{N}{2}$
\end_inset

]e
\begin_inset Formula $^{\pi kj}$
\end_inset

    
\end_layout

\begin_layout Standard
= 
\begin_inset Formula $\sum_{n=1}^{\frac{N}{2}-1}$
\end_inset

-2jy[n]sin(
\begin_inset Formula $\frac{2\pi kn}{N}$
\end_inset

)+(-1)
\begin_inset Formula $^{k}$
\end_inset

y[
\begin_inset Formula $\frac{N}{2}$
\end_inset

]
\end_layout

\begin_layout Standard
But this is no longer pure imaginary! Since we need that property, we set
 y[
\begin_inset Formula $\frac{N}{2}$
\end_inset

] to zero.
 That gives us a purely imaginary phase.
\end_layout

\begin_layout Subsubsection
Plotting for many time periods :
\end_layout

\begin_layout Standard
In this question, we plotted the graphs for three different time periods.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Plotting for several time periods
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t1 = linspace(-pi,pi,65)
\end_layout

\begin_layout Plain Layout

t1 = t1[:-1]
\end_layout

\begin_layout Plain Layout

t2 = linspace(-3*pi,-pi,65)
\end_layout

\begin_layout Plain Layout

t2 = t2[:-1]
\end_layout

\begin_layout Plain Layout

t3 = linspace(pi,3*pi,65)
\end_layout

\begin_layout Plain Layout

t3 = t3[:-1]
\end_layout

\begin_layout Plain Layout

# y=sin(sqrt(2)*t)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(1)
\end_layout

\begin_layout Plain Layout

plt.plot(t1,sin(sqrt(2)*t1),'b',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.plot(t2,sin(sqrt(2)*t2),'r',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.plot(t3,sin(sqrt(2)*t3),'r',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$t$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"$
\backslash
sin
\backslash
left(
\backslash
sqrt{2}t
\backslash
right)$")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("many_time_periods.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Above is the code we used.
 Following is the obtained plot,
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename many_time_periods.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
The blue line connects the points whose DFT we took.
 Red lines show the continuation of the fucntion.
 
\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) Even though sin(
\begin_inset Formula $\sqrt{2}$
\end_inset

t) is a periodic function, the portion between −
\begin_inset Formula $\pi$
\end_inset

 and 
\begin_inset Formula $\pi$
\end_inset

 is not the part that can be replicated to generate the function.
\end_layout

\begin_layout Subsubsection
Replicating for the required part :
\end_layout

\begin_layout Standard
So which function is the DFT trying to fourier analyse? For that we have
 to replicate just the above blue points.
 And that is shown below,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Replicating required part
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t1 = linspace(-pi,pi,65)
\end_layout

\begin_layout Plain Layout

t1 = t1[:-1]
\end_layout

\begin_layout Plain Layout

t2 = linspace(-3*pi,-pi,65)
\end_layout

\begin_layout Plain Layout

t2 = t2[:-1]
\end_layout

\begin_layout Plain Layout

t3 = linspace(pi,3*pi,65)
\end_layout

\begin_layout Plain Layout

t3 = t3[:-1]
\end_layout

\begin_layout Plain Layout

y = sin(sqrt(2)*t1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(3)
\end_layout

\begin_layout Plain Layout

plt.plot(t1,y,'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.plot(t2,y,'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.plot(t3,y,'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$t$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"$
\backslash
sin
\backslash
left(
\backslash
sqrt{2}t
\backslash
right)
\end_layout

\begin_layout Plain Layout

$ with $t$ wrapping every $2
\backslash
pi$ ")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("replication.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below are the obatined graphs,
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename replication.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) Clearly this function is not sin(
\begin_inset Formula $\sqrt{2}$
\end_inset

t) and that is why the DFT is not what we expect.
\end_layout

\begin_layout Subsubsection
Discussing Gibbs Phenomenon :
\end_layout

\begin_layout Standard
The Fourier transform of the box function,
\end_layout

\begin_layout Standard
f(t) = 1 for |t| <= t
\begin_inset Formula $_{0}$
\end_inset


\end_layout

\begin_layout Standard
f(t) = 0 for |t| > t
\begin_inset Formula $_{0}$
\end_inset


\end_layout

\begin_layout Standard
is,
\end_layout

\begin_layout Standard
F(
\begin_inset Formula $\varpi$
\end_inset

) = 
\begin_inset Formula $\frac{2sin(\varpi t_{0})}{\varpi_{0}}$
\end_inset


\end_layout

\begin_layout Standard
The spectrum of the box function decays very slowly, as 
\begin_inset Formula $\frac{2}{\varpi_{0}}$
\end_inset

.
\end_layout

\begin_layout Standard
Now our function is an odd function with a big jump.
 
\end_layout

\begin_layout Standard
So let us consider the periodic ramp: 
\end_layout

\begin_layout Standard
f(t) = t for −π < t < π 
\end_layout

\begin_layout Standard
Then the fourier series of this ramp is, 
\end_layout

\begin_layout Standard
f(t) = 2(
\begin_inset Formula $\frac{sint}{1}$
\end_inset

-
\begin_inset Formula $\frac{sin2t}{2}$
\end_inset

+
\begin_inset Formula $\frac{sin3t}{3}$
\end_inset

-...) 
\end_layout

\begin_layout Standard
Again the coefficients decay very slowly.
 The DFT is just like the fourier series, except that both time and frequency
 are samples.
 So, if the time samples are like a ramp, the frequency samples will decay
 as 1/ω.
 Below is the code for it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##Obtaining ramp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-pi,pi,65)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

y = t
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
    
\end_layout

\begin_layout Plain Layout

#the sample corresponding to -tmax should be set zero
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
    
\end_layout

\begin_layout Plain Layout

#make y start with y(t=0)
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/64.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,65)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(3)
\end_layout

\begin_layout Plain Layout

plt.semilogx(abs(w),20*log10(abs(Y)),lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([1,10])
\end_layout

\begin_layout Plain Layout

plt.ylim([-20,0])
\end_layout

\begin_layout Plain Layout

plt.xticks([1,2,5,10],["1","2","5","10"],size = 16)
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$ (dB)",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of a digital ramp")
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("ramp.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the graph I got.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ramp.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) Clearly the spectrum decays as 20 dB per decade, which corresponds to
 1/ω.
 
\end_layout

\begin_layout Standard
2) The big jumps at n
\begin_inset Formula $\pi$
\end_inset

 force this slowly decaying spectrum, which is why we don’t see the expected
 spikes for the spectrum of sin(
\begin_inset Formula $\sqrt{2}$
\end_inset

t).
\end_layout

\begin_layout Subsubsection
Discussing windowing :
\end_layout

\begin_layout Standard
Well, the spikes happen at the end of the periodic interval.
 So we damp the function near there, i.e., we multiply our function sequence
 f[n] by a “window” sequence w[n]: 
\end_layout

\begin_layout Standard
g(n) = f(n)w(n) 
\end_layout

\begin_layout Standard
The new spectrum is got by convolving the two fourier transforms: 
\end_layout

\begin_layout Standard
G
\begin_inset Formula $_{k}$
\end_inset

 = 
\begin_inset Formula $\sum_{n=0}^{N-1}$
\end_inset

F
\begin_inset Formula $_{n}$
\end_inset

W
\begin_inset Formula $_{k-n}$
\end_inset


\end_layout

\begin_layout Standard
Suppose f
\begin_inset Formula $_{n}$
\end_inset

 is a sinusoid.
 Then F
\begin_inset Formula $_{k}$
\end_inset

 has two spikes.
 But the two spikes are now smeared out by W
\begin_inset Formula $_{k}$
\end_inset

 .
 So we expect to get broader peaks.
 But what this also does is to suppress the jump at the edge of the window.
 The window we will use is called the Hamming window:
\end_layout

\begin_layout Standard
w[n] = 0.54 + 0.46cos(
\begin_inset Formula $\frac{2\pi n}{N-1}$
\end_inset

)               |n| <= 
\begin_inset Formula $\frac{N-1}{2}$
\end_inset


\end_layout

\begin_layout Standard
= 0                                  else
\end_layout

\begin_layout Standard
Let us look at our time sequence for sin(
\begin_inset Formula $\sqrt{2}$
\end_inset

t) now .
 .
 .
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Windowing
\end_layout

\begin_layout Plain Layout

t1 = linspace(-pi,pi,65)
\end_layout

\begin_layout Plain Layout

t1 = t1[:-1]
\end_layout

\begin_layout Plain Layout

t2 = linspace(-3*pi,-pi,65)
\end_layout

\begin_layout Plain Layout

t2 = t2[:-1]
\end_layout

\begin_layout Plain Layout

t3 = linspace(pi,3*pi,65)
\end_layout

\begin_layout Plain Layout

t3 = t3[:-1]
\end_layout

\begin_layout Plain Layout

n = arange(64)
\end_layout

\begin_layout Plain Layout

wnd = fftshift(0.54+0.46*cos(2*pi*n/63))
\end_layout

\begin_layout Plain Layout

y = sin(sqrt(2)*t1)*wnd
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(4)
\end_layout

\begin_layout Plain Layout

plt.plot(t1,y,'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.plot(t2,y,'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.plot(t3,y,'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$t$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"$
\backslash
sin
\backslash
left(
\backslash
sqrt{2}t
\backslash
right)
\backslash
times w(t)$ 
\end_layout

\begin_layout Plain Layout

with $t$ wrapping every $2
\backslash
pi$ ")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("windowing.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below is the plot I got,
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename windowing.png
	scale 50

\end_inset

4
\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) The jump is still there, but it is much reduced.
\end_layout

\begin_layout Subsubsection
Obtaining the spectrum of windowed function :
\end_layout

\begin_layout Standard
The jump is still there, but it is much reduced.
 Keeping a little bit of the jump gives us an extra 10 db of suppression.
 Now let us take the DFT of this sequence and see what we get.
\end_layout

\begin_layout Standard
Below is the code for it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Windowed fourier response
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-pi,pi,65)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

n = arange(64)
\end_layout

\begin_layout Plain Layout

wnd = fftshift(0.54+0.46*cos(2*pi*n/63))
\end_layout

\begin_layout Plain Layout

y = sin(sqrt(2)*t)*wnd
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                  
\end_layout

\begin_layout Plain Layout

#the sample corresponding to -tmax should be set zero
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                  
\end_layout

\begin_layout Plain Layout

#make y start with y(t=0)
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/64.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,65)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(5)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-8,8])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of $
\backslash
sin
\backslash
left(
\backslash
sqrt{2}t
\backslash
right)
\backslash
times w(t)$")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-8,8])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("windowed_fourier.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below is the obtained plot.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename windowed_fourier.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) Compare to our first plot and we can see that the magnitude is greatly
 improved.
 
\end_layout

\begin_layout Subsubsection
Obtaining the spectrum with increased number of points :
\end_layout

\begin_layout Standard
We still have a peak that is two samples wide.
 But that is because 
\begin_inset Formula $\sqrt{2}$
\end_inset

 lies between 1 and 2, which are the two fourier components available.
 If we use four times the number of points we should get better results.
 Below is the code for above implementation.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Increased points plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-4*pi,4*pi,257)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

n = arange(256)
\end_layout

\begin_layout Plain Layout

wnd = fftshift(0.54+0.46*cos(2*pi*n/256))
\end_layout

\begin_layout Plain Layout

y = sin(sqrt(2)*t)
\end_layout

\begin_layout Plain Layout

y = y*wnd
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                      
\end_layout

\begin_layout Plain Layout

#the sample corresponding to -tmax should be set zero
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                      
\end_layout

\begin_layout Plain Layout

#make y start with y(t=0)
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/256.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,257)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(6)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),'b',w,abs(Y),'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-4,4])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of $
\backslash
sin
\backslash
left(
\backslash
sqrt{2}t
\backslash
right)
\backslash
times w(t)$")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-4,4])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("many_points_windowed_fourier.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename many_points_windowed_fourier.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) It is quite bit better since we are now zoomed in and see a lot more
 detail.
 But it is not just a single peak.
 The reason for that is w(t).
 Multiplication in time is convolution in frequency and vice versa.
 So by multiplying with w(t), we got rid of the 1/ f decay.
 But the delta function is now replaced by the shape of the DFT of w[n].
 That gives us a factor of two broadening over the peak when there is no
 window, which is why we still see a peak whose width is two samples.
 It is not because 
\begin_inset Formula $\sqrt{2}$
\end_inset

 is between 1.25 and 1.5.
 There is an alternate function in the above code, namely sin(1.25t).
 But this gives a broad peak as well.
 That is because of w[n].cos
\begin_inset Formula $^{3}$
\end_inset

(
\begin_inset Formula $\varpi_{0}t)$
\end_inset


\end_layout

\begin_layout Subsection
Obtaining the spectrum of cos
\begin_inset Formula $^{3}$
\end_inset

(
\begin_inset Formula $\varpi_{0}t)$
\end_inset

,
\end_layout

\begin_layout Standard
In this question, we have obtained the fourier transform of cos
\begin_inset Formula $^{3}$
\end_inset

(
\begin_inset Formula $\varpi_{0}t)$
\end_inset

,
\end_layout

\begin_layout Subsubsection
With Hamming window :
\end_layout

\begin_layout Standard
Below is the code for it,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Spectrum of cos cubed t with Hamming window
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-8*pi,8*pi,513)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

n = arange(512)
\end_layout

\begin_layout Plain Layout

wnd = fftshift(0.54+0.46*cos(2*pi*n/512))
\end_layout

\begin_layout Plain Layout

y = cos(0.86*t)*cos(0.86*t)*cos(0.86*t)
\end_layout

\begin_layout Plain Layout

y = y*wnd
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                      
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                      
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/512.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,513)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(7)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),'b',w,abs(Y),'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of cos^3(t)")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("cos_cubed_ham.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below is the graph I got,
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cos_cubed_ham.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) We see 4 peaks as expected with alternate positive and negative phase
 for sine and zero phase for cosine.
\end_layout

\begin_layout Standard
2) The phase at the peak is 
\begin_inset Formula $\pi$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Without Hamming window :
\end_layout

\begin_layout Standard
Below is the required code,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Spectrum of cos cubed t without Hamming window
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-8*pi,8*pi,513)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

y = cos(0.86*t)*cos(0.86*t)*cos(0.86*t)
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                      
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                      
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/512.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,513)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(8)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),'b',w,abs(Y),'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of cos^3(t)")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("cos_cubed_non-ham.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below is the obtained plot.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cos_cubed_non-ham.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) We see 4 peaks expected.
 But, as compared to the earlier case, the height of the peaks is quite
 larger.
 
\end_layout

\begin_layout Subsection
Obtaining the spectrum of cos(
\begin_inset Formula $\omega_{0}$
\end_inset

t + 
\begin_inset Formula $\delta$
\end_inset

),
\end_layout

\begin_layout Standard
In this question, we had to write a program that will take a 128 element
 vector known to contain cos(
\begin_inset Formula $\omega_{0}$
\end_inset

t + 
\begin_inset Formula $\delta$
\end_inset

) for arbitrary δ and 0.5 < ω
\begin_inset Formula $_{0}$
\end_inset

 < 1.5.
 The values of t go from −
\begin_inset Formula $\pi$
\end_inset

 to 
\begin_inset Formula $\pi$
\end_inset

.
 We had to extract the digital spectrum of the signal, find the two peaks
 at ±ω
\begin_inset Formula $_{0}$
\end_inset

 , and estimate ω
\begin_inset Formula $_{0}$
\end_inset

 and 
\begin_inset Formula $\delta$
\end_inset

.
\end_layout

\begin_layout Standard
Below is the code for it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Spectrum of cos(omega*t + delta)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-2*pi,2*pi,129)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

delta = numpy.random.randn(len(t))
\end_layout

\begin_layout Plain Layout

y = cos(t + delta)                                                     
 
\end_layout

\begin_layout Plain Layout

#I took omega as 1
\end_layout

\begin_layout Plain Layout

n = arange(128)
\end_layout

\begin_layout Plain Layout

wnd = fftshift(0.54+0.46*cos(2*pi*n/128))
\end_layout

\begin_layout Plain Layout

y = y*wnd
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                      
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                      
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/128.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,129)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(9)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),'b',w,abs(Y),'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title('Spectrum of cos(wt + d) 
\backslash
n omega = 1')
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("cos(wt + delta).png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I obtained the following graph.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cos(wt + delta).png
	scale 50

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inference:
\end_layout

\begin_layout Standard
Here, the location of the peaks is at 
\begin_inset Formula $\varpi_{0}$
\end_inset

= -1 and 
\begin_inset Formula $\varpi_{0}$
\end_inset

= 1.
 From the phase plot, we can get an estimate of the value of 
\begin_inset Formula $\delta$
\end_inset

.
 Phase is shifted by δ at these peaks.
 As the value of δ increases, the shift in phase increases more and more.
\end_layout

\begin_layout Subsection
Obtaining the spectrum of cos(
\begin_inset Formula $\omega_{0}$
\end_inset

t + 
\begin_inset Formula $\delta$
\end_inset

) with noise,
\end_layout

\begin_layout Standard
Now, we add “white gaussian noise” to the problem in question 3.
 This can be generated by randn() in python.
 The extent of this noise is 0.1 in amplitude (i.e., 0.1*randn(N), where N is
 the number of samples).
 Again we need to find 
\begin_inset Formula $\varpi_{0}$
\end_inset

and 
\begin_inset Formula $\delta$
\end_inset

.
\end_layout

\begin_layout Standard
This is the code for it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Spectrum of cos(omega*t + delta) with white gaussian noise
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-2*pi,2*pi,129)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

delta = numpy.random.randn(len(t))
\end_layout

\begin_layout Plain Layout

y = cos(t + delta) + 0.1*numpy.random.randn(len(t))                       
                               
\end_layout

\begin_layout Plain Layout

#I took omega as 1
\end_layout

\begin_layout Plain Layout

n = arange(128)
\end_layout

\begin_layout Plain Layout

wnd = fftshift(0.54+0.46*cos(2*pi*n/128))
\end_layout

\begin_layout Plain Layout

y = y*wnd
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                      
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                      
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/128.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,129)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(10)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),'b',w,abs(Y),'bo',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title('Spectrum of cos(wt + d) with noise 
\backslash
n omega = 1')
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-5,5])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("cos(wt + delta) with noise.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the obtained plot.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename cos(wt + delta) with noise.png
	scale 50

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inference:
\end_layout

\begin_layout Standard
Here, the location of the peaks is at 
\begin_inset Formula $\varpi_{0}$
\end_inset

= -1 and 
\begin_inset Formula $\varpi_{0}$
\end_inset

= 1.
 From the phase plot, we can get an estimate of the value of 
\begin_inset Formula $\delta$
\end_inset

.
 As we can see, the magnitude plot is almost the same except for some noisy
 values instead of zeros, however the phase plot is quite dierent at the
 points other than the peaks.
\end_layout

\begin_layout Subsection
Plotting the dft of chirped signal :
\end_layout

\begin_layout Standard
In this question, we have to plot the dft of 'chirped signal'.
 The function is,
\end_layout

\begin_layout Standard
cos(16(1.5 + 
\begin_inset Formula $\frac{t}{2\pi}$
\end_inset

)t)
\end_layout

\begin_layout Standard
for t going from −
\begin_inset Formula $\pi$
\end_inset

 to 
\begin_inset Formula $\pi$
\end_inset

 in 1024 steps.
 
\end_layout

\begin_layout Standard
This is known as a “chirped” signal, and its frequency continuously changes
 from 16 to 32 radians per second.
 
\end_layout

\begin_layout Standard
This also means that the period is 64 samples near −
\begin_inset Formula $\pi$
\end_inset

 and is 32 samples near +
\begin_inset Formula $\pi$
\end_inset

.
\end_layout

\begin_layout Standard
The code for the above implementation is as shown below.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Spectrum of chirped signal
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = linspace(-pi,pi,1025)
\end_layout

\begin_layout Plain Layout

t = t[:-1]
\end_layout

\begin_layout Plain Layout

dt = t[1]-t[0]
\end_layout

\begin_layout Plain Layout

fmax = 1/dt
\end_layout

\begin_layout Plain Layout

y = cos(16*(1.5 + t/(2*pi))*t)
\end_layout

\begin_layout Plain Layout

y[0] = 0                                                               
                      
\end_layout

\begin_layout Plain Layout

y = fftshift(y)                                                        
                      
\end_layout

\begin_layout Plain Layout

Y = fftshift(fft(y))/1024.0
\end_layout

\begin_layout Plain Layout

w = linspace(-pi*fmax,pi*fmax,1025)
\end_layout

\begin_layout Plain Layout

w = w[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Plotting
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plt.figure(11)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,1)
\end_layout

\begin_layout Plain Layout

plt.plot(w,abs(Y),'b',w,abs(Y),'bo',lw = 1)
\end_layout

\begin_layout Plain Layout

plt.xlim([-50,50])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"$|Y|$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.title(r"Spectrum of chirped signal")
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.subplot(2,1,2)
\end_layout

\begin_layout Plain Layout

plt.plot(w,angle(Y),'ro',lw = 2)
\end_layout

\begin_layout Plain Layout

plt.xlim([-50,50])
\end_layout

\begin_layout Plain Layout

plt.ylabel(r"Phase of $Y$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.xlabel(r"$
\backslash
omega$",size = 16)
\end_layout

\begin_layout Plain Layout

plt.grid(True)
\end_layout

\begin_layout Plain Layout

plt.savefig("chirped signal.png")
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below shown is the plot for the above implementation.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename chirped signal.png
	scale 50

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
Inference:
\end_layout

\begin_layout Standard
1) Here, the location of the peaks is at 
\begin_inset Formula $\varpi_{0}$
\end_inset

= -25 and 
\begin_inset Formula $\varpi_{0}$
\end_inset

= 25.
 The height of the peak is about 0.20.
\end_layout

\begin_layout Subsection
Plotting some sections of the chirped signal and getting the surface plot
 :
\end_layout

\begin_layout Standard
In this question we were asked to the following:
\end_layout

\begin_layout Standard
1) For the same chirped signal, break the 1024 vector into pieces that are
 64 samples wide.
 
\end_layout

\begin_layout Standard
2) Extract the DFT of each and store as a column in a 2D array.
 
\end_layout

\begin_layout Standard
3) Then plot the array as a surface plot to show how the frequency of the
 signal varies with time.
 This is a “time-frequency” plot, where we get localized DFTs and show how
 the spectrum evolves in time.
\end_layout

\begin_layout Standard
Below code shows the way, I have splitted the time scale.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Getting dft for a range of frequencies and 
\end_layout

\begin_layout Plain Layout

obtaining the surface plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

S = numpy.zeros((63, 63))
\end_layout

\begin_layout Plain Layout

t_plot = linspace(-pi,pi,64)
\end_layout

\begin_layout Plain Layout

t_plot = t_plot[:-1]
\end_layout

\begin_layout Plain Layout

dt_plot = t_plot[1]-t_plot[0]
\end_layout

\begin_layout Plain Layout

fmax_plot = 1/dt_plot
\end_layout

\begin_layout Plain Layout

w_plot = linspace(-pi*fmax_plot,pi*fmax_plot,64)
\end_layout

\begin_layout Plain Layout

w_plot = w_plot[:-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for k in range(0,15):
\end_layout

\begin_layout Plain Layout

	t = linspace((-(8-k)*pi)/8,(-(7-k)*pi)/8, 64) 
\end_layout

\begin_layout Plain Layout

	t = t[:-1]
\end_layout

\begin_layout Plain Layout

	y = cos(16*(1.5 + t/(2*pi))*t)
\end_layout

\begin_layout Plain Layout

	y[0] = 0
\end_layout

\begin_layout Plain Layout

	y = fftshift(y)                                                       
                       
\end_layout

\begin_layout Plain Layout

	Y = fftshift(fft(y))/64
\end_layout

\begin_layout Plain Layout

	S[:,k] = Y.transpose()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Following code shows the way I plotted the surface plot.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Plotting the surface plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

figure = figure(12)
\end_layout

\begin_layout Plain Layout

plotting = axes.Axes3D(figure) 									
\end_layout

\begin_layout Plain Layout

#Axes3D is the means to do a surface plot
\end_layout

\begin_layout Plain Layout

plt.title('The 3-D surface plot of chirped function')
\end_layout

\begin_layout Plain Layout

surf = plotting.plot_surface(t_plot, 
\end_layout

\begin_layout Plain Layout

w_plot, abs(S).T, rstride=1, cstride=1, cmap=cm.jet)
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename surface_plot.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Above shown is the surface plot I obatined.
\end_layout

\begin_layout Standard

\series bold
Inference:
\end_layout

\begin_layout Standard
1) From the plot, we see that there are two peaks in the plot.
\end_layout

\begin_layout Standard
2) The waveforms are decaying in both the directions.
\end_layout

\end_body
\end_document
